// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package bridgev1

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type EventTable interface {
	Insert(ctx context.Context, event *Event) error
	InsertReturningID(ctx context.Context, event *Event) (uint64, error)
	Update(ctx context.Context, event *Event) error
	Save(ctx context.Context, event *Event) error
	Delete(ctx context.Context, event *Event) error
	Has(ctx context.Context, event_id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, event_id uint64) (*Event, error)
	List(ctx context.Context, prefixKey EventIndexKey, opts ...ormlist.Option) (EventIterator, error)
	ListRange(ctx context.Context, from, to EventIndexKey, opts ...ormlist.Option) (EventIterator, error)
	DeleteBy(ctx context.Context, prefixKey EventIndexKey) error
	DeleteRange(ctx context.Context, from, to EventIndexKey) error

	doNotImplement()
}

type EventIterator struct {
	ormtable.Iterator
}

func (i EventIterator) Value() (*Event, error) {
	var event Event
	err := i.UnmarshalMessage(&event)
	return &event, err
}

type EventIndexKey interface {
	id() uint32
	values() []interface{}
	eventIndexKey()
}

// primary key starting index..
type EventPrimaryKey = EventEventIdIndexKey

type EventEventIdIndexKey struct {
	vs []interface{}
}

func (x EventEventIdIndexKey) id() uint32            { return 0 }
func (x EventEventIdIndexKey) values() []interface{} { return x.vs }
func (x EventEventIdIndexKey) eventIndexKey()        {}

func (this EventEventIdIndexKey) WithEventId(event_id uint64) EventEventIdIndexKey {
	this.vs = []interface{}{event_id}
	return this
}

type eventTable struct {
	table ormtable.AutoIncrementTable
}

func (this eventTable) Insert(ctx context.Context, event *Event) error {
	return this.table.Insert(ctx, event)
}

func (this eventTable) Update(ctx context.Context, event *Event) error {
	return this.table.Update(ctx, event)
}

func (this eventTable) Save(ctx context.Context, event *Event) error {
	return this.table.Save(ctx, event)
}

func (this eventTable) Delete(ctx context.Context, event *Event) error {
	return this.table.Delete(ctx, event)
}

func (this eventTable) InsertReturningID(ctx context.Context, event *Event) (uint64, error) {
	return this.table.InsertReturningID(ctx, event)
}

func (this eventTable) Has(ctx context.Context, event_id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, event_id)
}

func (this eventTable) Get(ctx context.Context, event_id uint64) (*Event, error) {
	var event Event
	found, err := this.table.PrimaryKey().Get(ctx, &event, event_id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &event, nil
}

func (this eventTable) List(ctx context.Context, prefixKey EventIndexKey, opts ...ormlist.Option) (EventIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return EventIterator{it}, err
}

func (this eventTable) ListRange(ctx context.Context, from, to EventIndexKey, opts ...ormlist.Option) (EventIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return EventIterator{it}, err
}

func (this eventTable) DeleteBy(ctx context.Context, prefixKey EventIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this eventTable) DeleteRange(ctx context.Context, from, to EventIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this eventTable) doNotImplement() {}

var _ EventTable = eventTable{}

func NewEventTable(db ormtable.Schema) (EventTable, error) {
	table := db.GetTable(&Event{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Event{}).ProtoReflect().Descriptor().FullName()))
	}
	return eventTable{table.(ormtable.AutoIncrementTable)}, nil
}

type StateStore interface {
	EventTable() EventTable

	doNotImplement()
}

type stateStore struct {
	event EventTable
}

func (x stateStore) EventTable() EventTable {
	return x.event
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	eventTable, err := NewEventTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		eventTable,
	}, nil
}
