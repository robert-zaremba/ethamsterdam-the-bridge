// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/bridge/v1/tx.proto

package axelarbridge

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRecordBridgeEvent struct {
	BridgeAccount string `protobuf:"bytes,1,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
	SrcChain      string `protobuf:"bytes,2,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	SrcTxId       []byte `protobuf:"bytes,3,opt,name=src_tx_id,json=srcTxId,proto3" json:"src_tx_id,omitempty"`
	Sender        string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	Handler       string `protobuf:"bytes,5,opt,name=handler,proto3" json:"handler,omitempty"`
	Payload       []byte `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	BridgeData    []byte `protobuf:"bytes,7,opt,name=bridge_data,json=bridgeData,proto3" json:"bridge_data,omitempty"`
}

func (m *MsgRecordBridgeEvent) Reset()         { *m = MsgRecordBridgeEvent{} }
func (m *MsgRecordBridgeEvent) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBridgeEvent) ProtoMessage()    {}
func (*MsgRecordBridgeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a06e84380dc8d4, []int{0}
}
func (m *MsgRecordBridgeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBridgeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBridgeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBridgeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBridgeEvent.Merge(m, src)
}
func (m *MsgRecordBridgeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBridgeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBridgeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBridgeEvent proto.InternalMessageInfo

func (m *MsgRecordBridgeEvent) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

func (m *MsgRecordBridgeEvent) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *MsgRecordBridgeEvent) GetSrcTxId() []byte {
	if m != nil {
		return m.SrcTxId
	}
	return nil
}

func (m *MsgRecordBridgeEvent) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRecordBridgeEvent) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *MsgRecordBridgeEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MsgRecordBridgeEvent) GetBridgeData() []byte {
	if m != nil {
		return m.BridgeData
	}
	return nil
}

// MsgRecordBridgeEventResponse defines the Msg/SubmitProposal response type.
type MsgRecordBridgeEventResponse struct {
	EventId uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *MsgRecordBridgeEventResponse) Reset()         { *m = MsgRecordBridgeEventResponse{} }
func (m *MsgRecordBridgeEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBridgeEventResponse) ProtoMessage()    {}
func (*MsgRecordBridgeEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a06e84380dc8d4, []int{1}
}
func (m *MsgRecordBridgeEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBridgeEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBridgeEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBridgeEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBridgeEventResponse.Merge(m, src)
}
func (m *MsgRecordBridgeEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBridgeEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBridgeEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBridgeEventResponse proto.InternalMessageInfo

func (m *MsgRecordBridgeEventResponse) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type MsgExecBridgeEvent struct {
	Executor string `protobuf:"bytes,1,opt,name=executor,proto3" json:"executor,omitempty"`
	EventId  uint64 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *MsgExecBridgeEvent) Reset()         { *m = MsgExecBridgeEvent{} }
func (m *MsgExecBridgeEvent) String() string { return proto.CompactTextString(m) }
func (*MsgExecBridgeEvent) ProtoMessage()    {}
func (*MsgExecBridgeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a06e84380dc8d4, []int{2}
}
func (m *MsgExecBridgeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecBridgeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecBridgeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecBridgeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecBridgeEvent.Merge(m, src)
}
func (m *MsgExecBridgeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecBridgeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecBridgeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecBridgeEvent proto.InternalMessageInfo

func (m *MsgExecBridgeEvent) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *MsgExecBridgeEvent) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

// MsgExecBridgeEventResponse defines the Msg/ExecLegacyContent response type.
type MsgExecBridgeEventResponse struct {
}

func (m *MsgExecBridgeEventResponse) Reset()         { *m = MsgExecBridgeEventResponse{} }
func (m *MsgExecBridgeEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecBridgeEventResponse) ProtoMessage()    {}
func (*MsgExecBridgeEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a06e84380dc8d4, []int{3}
}
func (m *MsgExecBridgeEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecBridgeEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecBridgeEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecBridgeEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecBridgeEventResponse.Merge(m, src)
}
func (m *MsgExecBridgeEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecBridgeEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecBridgeEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecBridgeEventResponse proto.InternalMessageInfo

type MsgSendBridgeEvent struct {
	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Handler string `protobuf:"bytes,3,opt,name=handler,proto3" json:"handler,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *MsgSendBridgeEvent) Reset()         { *m = MsgSendBridgeEvent{} }
func (m *MsgSendBridgeEvent) String() string { return proto.CompactTextString(m) }
func (*MsgSendBridgeEvent) ProtoMessage()    {}
func (*MsgSendBridgeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a06e84380dc8d4, []int{4}
}
func (m *MsgSendBridgeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendBridgeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendBridgeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendBridgeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendBridgeEvent.Merge(m, src)
}
func (m *MsgSendBridgeEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendBridgeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendBridgeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendBridgeEvent proto.InternalMessageInfo

func (m *MsgSendBridgeEvent) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendBridgeEvent) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgSendBridgeEvent) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *MsgSendBridgeEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// MsgMsgSendBridgeEventResponse defines the Msg/ExecLegacyContent response
// type.
type MsgSendBridgeEventResponse struct {
}

func (m *MsgSendBridgeEventResponse) Reset()         { *m = MsgSendBridgeEventResponse{} }
func (m *MsgSendBridgeEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendBridgeEventResponse) ProtoMessage()    {}
func (*MsgSendBridgeEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a06e84380dc8d4, []int{5}
}
func (m *MsgSendBridgeEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendBridgeEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendBridgeEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendBridgeEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendBridgeEventResponse.Merge(m, src)
}
func (m *MsgSendBridgeEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendBridgeEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendBridgeEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendBridgeEventResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRecordBridgeEvent)(nil), "axelar.bridge.v1.MsgRecordBridgeEvent")
	proto.RegisterType((*MsgRecordBridgeEventResponse)(nil), "axelar.bridge.v1.MsgRecordBridgeEventResponse")
	proto.RegisterType((*MsgExecBridgeEvent)(nil), "axelar.bridge.v1.MsgExecBridgeEvent")
	proto.RegisterType((*MsgExecBridgeEventResponse)(nil), "axelar.bridge.v1.MsgExecBridgeEventResponse")
	proto.RegisterType((*MsgSendBridgeEvent)(nil), "axelar.bridge.v1.MsgSendBridgeEvent")
	proto.RegisterType((*MsgSendBridgeEventResponse)(nil), "axelar.bridge.v1.MsgSendBridgeEventResponse")
}

func init() { proto.RegisterFile("axelar/bridge/v1/tx.proto", fileDescriptor_c6a06e84380dc8d4) }

var fileDescriptor_c6a06e84380dc8d4 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xb3, 0x49, 0x9a, 0xa4, 0xe6, 0xbf, 0x15, 0xa1, 0xcd, 0x52, 0x2d, 0x55, 0x04, 0xa8,
	0x07, 0x58, 0xab, 0xc0, 0x85, 0x23, 0x85, 0x1e, 0x2a, 0x14, 0x0e, 0x81, 0x13, 0x97, 0xc8, 0xb1,
	0x07, 0x27, 0xea, 0xd6, 0x8e, 0x6c, 0x27, 0x6c, 0xdf, 0x82, 0x47, 0xe2, 0xc8, 0xb1, 0x47, 0x8e,
	0x28, 0x79, 0x11, 0xb4, 0xf6, 0xa6, 0x64, 0xb7, 0x89, 0xd4, 0x5b, 0xbe, 0xf9, 0x26, 0xf3, 0x8d,
	0x7f, 0xf6, 0xa2, 0x1e, 0xcd, 0x20, 0xa5, 0x9a, 0x8c, 0xf5, 0x94, 0x0b, 0x20, 0x8b, 0x63, 0x62,
	0xb3, 0x64, 0xa6, 0x95, 0x55, 0xf8, 0xa1, 0xb7, 0x12, 0x6f, 0x25, 0x8b, 0xe3, 0xa8, 0x2b, 0x94,
	0x50, 0xce, 0x24, 0xf9, 0x2f, 0xdf, 0x17, 0xf5, 0x98, 0x32, 0x17, 0xca, 0x8c, 0xbc, 0xe1, 0xc5,
	0xda, 0x12, 0x4a, 0x89, 0x14, 0x88, 0x53, 0xe3, 0xf9, 0x77, 0x42, 0xe5, 0xa5, 0xb7, 0xfa, 0xab,
	0x00, 0x75, 0x07, 0x46, 0x0c, 0x81, 0x29, 0xcd, 0x4f, 0x5c, 0xc4, 0xe9, 0x02, 0xa4, 0xc5, 0xcf,
	0xd1, 0x7d, 0x9f, 0x38, 0xa2, 0x8c, 0xa9, 0xb9, 0xb4, 0x61, 0x70, 0x18, 0x1c, 0xed, 0x0f, 0xef,
	0xf9, 0xea, 0x7b, 0x5f, 0xc4, 0x4f, 0xd0, 0xbe, 0xd1, 0x6c, 0xc4, 0x26, 0x74, 0x2a, 0xc3, 0xba,
	0xeb, 0xe8, 0x18, 0xcd, 0x3e, 0xe4, 0x1a, 0x47, 0xde, 0xb4, 0xd9, 0x68, 0xca, 0xc3, 0xc6, 0x61,
	0x70, 0x74, 0x77, 0xd8, 0x36, 0x9a, 0x7d, 0xcd, 0xce, 0x38, 0x7e, 0x8c, 0x5a, 0x06, 0x24, 0x07,
	0x1d, 0x36, 0xdd, 0xbf, 0x0a, 0x85, 0x43, 0xd4, 0x9e, 0x50, 0xc9, 0x53, 0xd0, 0xe1, 0x9e, 0x33,
	0xd6, 0x32, 0x77, 0x66, 0xf4, 0x32, 0x55, 0x94, 0x87, 0x2d, 0x3f, 0xab, 0x90, 0xf8, 0x29, 0xba,
	0x53, 0xec, 0xca, 0xa9, 0xa5, 0x61, 0xdb, 0xb9, 0xc8, 0x97, 0x3e, 0x52, 0x4b, 0xfb, 0xef, 0xd0,
	0xc1, 0xb6, 0x43, 0x0e, 0xc1, 0xcc, 0x94, 0x34, 0x80, 0x7b, 0xa8, 0x03, 0x79, 0x21, 0xdf, 0x33,
	0x3f, 0x66, 0x73, 0xd8, 0x76, 0xfa, 0x8c, 0xf7, 0x3f, 0x21, 0x3c, 0x30, 0xe2, 0x34, 0x03, 0xb6,
	0x49, 0x27, 0x42, 0x1d, 0xc8, 0x80, 0xcd, 0xad, 0xd2, 0x05, 0x97, 0x6b, 0x5d, 0x1a, 0x56, 0x2f,
	0x0f, 0x3b, 0x40, 0xd1, 0xcd, 0x61, 0xeb, 0x2d, 0xfa, 0x0b, 0x17, 0xf5, 0x05, 0x64, 0xe9, 0x22,
	0xfe, 0x83, 0x0a, 0x4a, 0xa0, 0xba, 0x68, 0x6f, 0x93, 0xba, 0x17, 0x9b, 0xf8, 0x1a, 0x3b, 0xf1,
	0x35, 0x4b, 0xf8, 0x8a, 0xad, 0x2a, 0xb9, 0xeb, 0xad, 0x5e, 0xff, 0xaa, 0xa3, 0xc6, 0xc0, 0x08,
	0x7c, 0x8e, 0x1e, 0xdd, 0x7c, 0x25, 0x2f, 0x92, 0xea, 0xeb, 0x4c, 0xb6, 0x81, 0x8e, 0x92, 0xdb,
	0xf5, 0x5d, 0x5f, 0x08, 0xa0, 0x07, 0x55, 0xe4, 0xcf, 0xb6, 0x8e, 0xa8, 0x74, 0x45, 0x2f, 0x6f,
	0xd3, 0xb5, 0x19, 0x53, 0xc5, 0xbd, 0x3d, 0xa6, 0xd2, 0xb5, 0x23, 0x66, 0x07, 0xc2, 0x93, 0xcf,
	0xbf, 0x97, 0x71, 0x70, 0xb5, 0x8c, 0x83, 0xbf, 0xcb, 0x38, 0xf8, 0xb9, 0x8a, 0x6b, 0x57, 0xab,
	0xb8, 0xf6, 0x67, 0x15, 0xd7, 0xbe, 0xbd, 0x15, 0x53, 0x3b, 0x99, 0x8f, 0x13, 0xa6, 0x2e, 0x88,
	0x06, 0x01, 0xf2, 0x95, 0x04, 0xfb, 0x43, 0xe9, 0xf3, 0x42, 0xa5, 0xc0, 0x05, 0x68, 0x92, 0x11,
	0x1f, 0xe7, 0xd3, 0xc6, 0x2d, 0xf7, 0xed, 0xbe, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff, 0x24, 0x49,
	0xbd, 0x4a, 0x36, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Records a bridged event and returns it's ID
	RecordBridgeEvent(ctx context.Context, in *MsgRecordBridgeEvent, opts ...grpc.CallOption) (*MsgRecordBridgeEventResponse, error)
	// Queries and executes a recorded event. Once processed the event is removed.
	ExecBridgeEvent(ctx context.Context, in *MsgExecBridgeEvent, opts ...grpc.CallOption) (*MsgExecBridgeEventResponse, error)
	// Sends a new event to the bridge servcie (chain)
	SendBridgeEvent(ctx context.Context, in *MsgSendBridgeEvent, opts ...grpc.CallOption) (*MsgSendBridgeEventResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RecordBridgeEvent(ctx context.Context, in *MsgRecordBridgeEvent, opts ...grpc.CallOption) (*MsgRecordBridgeEventResponse, error) {
	out := new(MsgRecordBridgeEventResponse)
	err := c.cc.Invoke(ctx, "/axelar.bridge.v1.Msg/RecordBridgeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecBridgeEvent(ctx context.Context, in *MsgExecBridgeEvent, opts ...grpc.CallOption) (*MsgExecBridgeEventResponse, error) {
	out := new(MsgExecBridgeEventResponse)
	err := c.cc.Invoke(ctx, "/axelar.bridge.v1.Msg/ExecBridgeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendBridgeEvent(ctx context.Context, in *MsgSendBridgeEvent, opts ...grpc.CallOption) (*MsgSendBridgeEventResponse, error) {
	out := new(MsgSendBridgeEventResponse)
	err := c.cc.Invoke(ctx, "/axelar.bridge.v1.Msg/SendBridgeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Records a bridged event and returns it's ID
	RecordBridgeEvent(context.Context, *MsgRecordBridgeEvent) (*MsgRecordBridgeEventResponse, error)
	// Queries and executes a recorded event. Once processed the event is removed.
	ExecBridgeEvent(context.Context, *MsgExecBridgeEvent) (*MsgExecBridgeEventResponse, error)
	// Sends a new event to the bridge servcie (chain)
	SendBridgeEvent(context.Context, *MsgSendBridgeEvent) (*MsgSendBridgeEventResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RecordBridgeEvent(ctx context.Context, req *MsgRecordBridgeEvent) (*MsgRecordBridgeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordBridgeEvent not implemented")
}
func (*UnimplementedMsgServer) ExecBridgeEvent(ctx context.Context, req *MsgExecBridgeEvent) (*MsgExecBridgeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecBridgeEvent not implemented")
}
func (*UnimplementedMsgServer) SendBridgeEvent(ctx context.Context, req *MsgSendBridgeEvent) (*MsgSendBridgeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBridgeEvent not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RecordBridgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordBridgeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RecordBridgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.bridge.v1.Msg/RecordBridgeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RecordBridgeEvent(ctx, req.(*MsgRecordBridgeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecBridgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecBridgeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecBridgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.bridge.v1.Msg/ExecBridgeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecBridgeEvent(ctx, req.(*MsgExecBridgeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendBridgeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendBridgeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendBridgeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axelar.bridge.v1.Msg/SendBridgeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendBridgeEvent(ctx, req.(*MsgSendBridgeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axelar.bridge.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordBridgeEvent",
			Handler:    _Msg_RecordBridgeEvent_Handler,
		},
		{
			MethodName: "ExecBridgeEvent",
			Handler:    _Msg_ExecBridgeEvent_Handler,
		},
		{
			MethodName: "SendBridgeEvent",
			Handler:    _Msg_SendBridgeEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axelar/bridge/v1/tx.proto",
}

func (m *MsgRecordBridgeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBridgeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBridgeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeData) > 0 {
		i -= len(m.BridgeData)
		copy(dAtA[i:], m.BridgeData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeData)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Handler) > 0 {
		i -= len(m.Handler)
		copy(dAtA[i:], m.Handler)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Handler)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcTxId) > 0 {
		i -= len(m.SrcTxId)
		copy(dAtA[i:], m.SrcTxId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcTxId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordBridgeEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBridgeEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBridgeEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecBridgeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecBridgeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecBridgeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecBridgeEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecBridgeEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecBridgeEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendBridgeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendBridgeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendBridgeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Handler) > 0 {
		i -= len(m.Handler)
		copy(dAtA[i:], m.Handler)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Handler)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendBridgeEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendBridgeEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendBridgeEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRecordBridgeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcTxId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRecordBridgeEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovTx(uint64(m.EventId))
	}
	return n
}

func (m *MsgExecBridgeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovTx(uint64(m.EventId))
	}
	return n
}

func (m *MsgExecBridgeEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendBridgeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendBridgeEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRecordBridgeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBridgeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBridgeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxId = append(m.SrcTxId[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcTxId == nil {
				m.SrcTxId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeData = append(m.BridgeData[:0], dAtA[iNdEx:postIndex]...)
			if m.BridgeData == nil {
				m.BridgeData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordBridgeEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBridgeEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBridgeEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecBridgeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecBridgeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecBridgeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecBridgeEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecBridgeEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecBridgeEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendBridgeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendBridgeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendBridgeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendBridgeEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendBridgeEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendBridgeEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
